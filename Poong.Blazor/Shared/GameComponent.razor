@implements IDisposable
@inject IJSRuntime JsRuntime
@using Poong.Blazor.Shared
<Console Log="@ViewModel.Log"></Console>
<div class="main backdrop">
    <div id="board" class="board" >
        <Body Id="left-paddle"
              Height="@ViewModel.LeftPaddle.Height"
              Width="@ViewModel.LeftPaddle.Width"
              Left="@ViewModel.LeftPaddle.Left"
              Top="@ViewModel.LeftPaddle.Top"
              TargetLeft="@ViewModel.LeftPaddle.TargetLeft.GetValueOrDefault()"
              TargetTop="@ViewModel.LeftPaddle.TargetTop.GetValueOrDefault()"
              TargetTime="@ViewModel.LeftPaddle.TargetTime.GetValueOrDefault()">
        </Body>
        <Body Id="right-paddle"
              Height="@ViewModel.RightPaddle.Height"
              Width="@ViewModel.RightPaddle.Width"
              Left="@ViewModel.RightPaddle.Left"
              Top="@ViewModel.RightPaddle.Top"
              TargetLeft="@ViewModel.RightPaddle.TargetLeft.GetValueOrDefault()"
              TargetTop="@ViewModel.RightPaddle.TargetTop.GetValueOrDefault()"
              TargetTime="@ViewModel.RightPaddle.TargetTime.GetValueOrDefault()">
        </Body>
        <Body Id="ball-0"
              Height="@ViewModel.Balls.First().Height"
              Width="@ViewModel.Balls.First().Width"
              Left="@ViewModel.Balls.First().Left"
              Top="@ViewModel.Balls.First().Top"
              TargetLeft="@ViewModel.Balls.First().TargetLeft.GetValueOrDefault()"
              TargetTop="@ViewModel.Balls.First().TargetTop.GetValueOrDefault()"
              TargetTime="@ViewModel.Balls.First().TargetTime.GetValueOrDefault()">
        </Body>
    </div>
    <div class="walls" style="min-width: @(Game.Config.HorizontalHalfSize*2*300)px; min-height: @(Game.Config.VerticalHalfSize*2*300)px;"></div>
    <canvas id="players-overlay" class="players-overlay">
    </canvas>
</div>
@using Poong.Engine;
@using System.Drawing;
@using System.Threading;
@code {
    [Parameter] public string Name { get; set; }
    [Inject]
    public IJSRuntime JSRuntime { get; set; }
    public ViewModel ViewModel = new ViewModel();
    public GameComponent()
    {

    }
    public async void Client_StateChanged(object sender, GameStateEventArgs e)
    {
        try
        {
            ViewModel.Update(e.State);
            ViewModel.LastMousePosition = await GetBrowserLastMousePosition();
            await JSRuntime.InvokeVoidAsync("setPlayersKeyframe", ViewModel.Players);
            if (e.State.Round != null)
                await SetDocumentTitle();

            await InvokeAsync(StateHasChanged);
        }
        catch
        {
        }
    }
    public void Game_PlayerJoined(object sender, PlayerEventArgs e)
    {
        ViewModel.LogMessage($"{e.Player.Name} joined.");
    }
    public void Game_ClientDisconnected(object sender, PlayerEventArgs e)
    {
        ViewModel.LogMessage($"{e.Player.Name} disconnected.");
    }
    protected async override void OnInitialized()
    {
        ViewModel.Game = Program.Game;
        ViewModel.Client = ViewModel.Game.Join(
        50.0f,
        50.0f,
        50.0f,
        50.0f,
        Name);
        ViewModel.Update(ViewModel.Client.State);
        await SetDocumentTitle();
        ViewModel.Client.StateChanged += Client_StateChanged;
        ViewModel.Game.PlayerJoined += Game_PlayerJoined;
        ViewModel.Game.ClientDisconnected += Game_ClientDisconnected;

    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await InitGameComponentInstance();
            await InitPlayersOverlayCanvas();
        }
    }
    private async Task InitGameComponentInstance()
    {
        var dotNetObjRef = DotNetObjectReference.Create(this);
        await JSRuntime.InvokeVoidAsync("registerGameComponentObject", dotNetObjRef);
    }
    private async Task InitPlayersOverlayCanvas()
    {
        await JSRuntime.InvokeVoidAsync("initPlayersOverlayCanvas", Game.Config.TickMilliseconds);
    }
    public async Task<PointF> GetBrowserLastMousePosition()
    {
        var p = await JSRuntime.InvokeAsync<PointF>("getLastMousePosition");
        return p;
    }
    internal async Task SetDocumentTitle()
    {
        await JSRuntime.InvokeVoidAsync("setDocumentTitle", $"P{"oooooooooooooooo".Substring(0, ViewModel.Round)}ng");
    }
    void IDisposable.Dispose()
    {
        ViewModel.Game.Disconnect(ViewModel.Client);
        System.Diagnostics.Debug.WriteLine($"{ViewModel.Client.Player.Name} disconnected.");
    }
}
